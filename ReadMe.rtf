{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red128\green128\blue128;\red14\green14\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs54 \cf0 What's Up Code Documentation
\fs24 \
\

\fs32 Overview
\fs24 \
\
There are two major components: the data pipeline, and the UX. The data pipeline is controlled by the 
\i StatusUpdateCollectionManager
\i0  class, which calls the various data providers the app displays, and persists the data for the UX.\
\
The UX is pretty straight forward, we're using a Navigation View Controller, with (1) Root View (2) Detail View and (3) About form\
\
\

\fs32 Performance\
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural

\fs24 \cf0 \
The biggest areas of concern for performance are (1) downloading data from so many different sources, and (2) getting user account images for each update. The 
\i StatusUpdateCollectionManager
\i0  tries to optimize the first with threaded calls, incremental updates and not updating more frequently than 1/60 seconds.\
\
For the images, I stole a multi-threaded & lazy loading approach from another application on the web. All in all, pretty damn fast for my first stupid iPhone app.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs32 \cf0 Data Pipeline\

\fs24 \
Currently there are only two data providers: Twitter & NOAA for Weather. I'll likely add USGS for earthquakes and reuse the Twitter provider for the curated list of location based tweets. Each provider has their own class 
\i ProviderNameUpdater
\i0  and the specific API is well documented with the implementation file in extensive comments. \
\
Images are lazy loaded as needed when the cell view updates\
\
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural
\cf2 \CocoaLigature0 // convert lat/ lon to zip code: {\field{\*\fldinst{HYPERLINK "http://ws.geonames.org/findNearbyPostalCodes?lat=34.005561&lng=-117.903403"}}{\fldrslt \cf3 http://ws.geonames.org/findNearbyPostalCodes?lat=34.005561&lng=-117.903403}}\cf0 \
\cf2 // scale down the image with this: {\field{\*\fldinst{HYPERLINK "http://vocaro.com/trevor/blog/2009/10/12/resize-a-uiimage-the-right-way/"}}{\fldrslt \cf3 http://vocaro.com/trevor/blog/2009/10/12/resize-a-uiimage-the-right-way/}}\cf0 \
\
\
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural

\f1\fs22 \cf0 	\cf2 // 2. create a new dictionary with a string for key and a string for value\cf0 \
	\cf2 // 3. iterate through the UpdateQueue\cf0 \
	\cf2 //		if UpdateQueueItem.source == CuratedTwitter\cf0 \
	\cf2 //			if( Dictionary != Contain key that equals the UpdateQueueItem.category )\cf0 \
	\cf2 //				Add new value to dictionary\cf0 \
	\cf2 //				Initialize the conection string with "{\field{\*\fldinst{HYPERLINK "http://search.twitter.com/"}}{\fldrslt \cf3 http://search.twitter.com/}}" + account name and such\cf0 \
	\cf2 //			else\cf0 \
	\cf2 //				check if this will push the length of the string to beyond 1000\cf0 \
	\cf2 //					if !yes\cf0 \
	\cf2 //						Add new item to the dictionary key's value\cf0 \
	\cf2 // 4. iterate through the dictionary\cf0 \
	\cf2 //		for each key, use the value as the parameter to call \cf0 \
	\cf2 //	at once: {\field{\*\fldinst{HYPERLINK "http://search.twitter.com/search?q=from:MyGreenLake+OR+from:westseattleblog+OR+from:wsdot+OR+from:strangerslog+OR+from:wsdot_traffic+OR+from:iheardSAM+OR+from:seattleaquarium+OR+from:thetrippledoor+OR+from:woodlenparkzoo+OR+from:curb_cuisine"}}{\fldrslt \cf3 http://search.twitter.com/search?q=from:MyGreenLake+OR+from:westseattleblog+OR+from:wsdot+OR+from:strangerslog+OR+from:wsdot_traffic+OR+from:iheardSAM+OR+from:seattleaquarium+OR+from:thetrippledoor+OR+from:woodlenparkzoo+OR+from:curb_cuisine}}\cf0 \
\
}